<?php

namespace AdministracionBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Symfony\Component\HttpFoundation\Request;

use AdministracionBundle\Entity\EstadoPedido;

/**
 * PedidoRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PedidoRepository extends EntityRepository
{
	public function findPedidoByVendedor($idUsuario, $start=0, $maxResults=6, $allResults = false){
		$em=$this->getEntityManager();

		$query = $em->createQuery("select cesta from AdministracionBundle:Cesta cesta 
			JOIN cesta.producto producto
			JOIN producto.usuarioid usuario
			JOIN cesta.pedido pedido
			where usuario.id =:idUsuario
			GROUP BY cesta.id, pedido.usuario ORDER BY pedido.fecha DESC");

		$cestas = null;

		if($allResults){
            $cestas = $query->setParameter('idUsuario',$idUsuario)->getResult();
        }
		else{
		    $cestas = $query->setParameter('idUsuario',$idUsuario)
                ->setMaxResults($maxResults)
                ->setFirstResult($start)
                ->getResult();
        }

		$pedidos=array();

		if($cestas!=null){
			foreach ($cestas as $cesta){
				if(!in_array($cesta->getPedido(),$pedidos)){
					$pedidos[]=$cesta->getPedido();
				}
			}
		}

		$pedidos2=$em->createQuery("select p from AdministracionBundle:Pedido p
			JOIN p.producto prod
			JOIN prod.usuarioid u
			WHERE prod!='NULL' and u.id=:idUsuario and p.borradoVendedor = false 
                        ORDER BY p.fecha DESC ")
            ->setParameter('idUsuario',$idUsuario)
            ->getResult();

		if($pedidos2!=null){
			foreach ($pedidos2 as $ped){
				$pedidos[]=$ped;
			}
		}

		return $pedidos;
	}

    public function findPedidoByComprador($idUsuario, $start=0, $maxResults = 6, $showAll = false){
            $em=$this->getEntityManager();

            $query = $em->createQuery("select p from AdministracionBundle:Pedido p 
                    JOIN p.usuario usuario			
                    where usuario.id =:idUsuario and p.borradoComprador = false
                    ORDER BY p.fecha DESC")->setParameter('idUsuario',$idUsuario);

            if(!$showAll){
                $query->setMaxResults($maxResults)->setFirstResult($start);
            }


            return $query->getResult();
    }
        
    public function findByPedido(Request $request)
    {
        $start=$request->request->get('start');
        $offset=$request->request->get('length');
        
        $dql = $this->findByPedidoTotal($request);
        $dql->setMaxResults($offset);
        $dql->setFirstResult($start);
        
        return $dql;
    }
    
    public function findByPedidoTotal(Request $request)
    {
        $em=$this->getEntityManager();

        $where="";
        $having="";
        $orderBy="";

        $flag=false;

        $whereParameters=array();

        $columnas=array(
            0=>"id",
            1=>"codigo",
            2=>"fecha",
            3=>"comprador",
            4=>"montoTotal",
            5=>"estado"
        );

        $idComprador=$request->request->get('idComprador');
        $idVendedor=$request->request->get('idVendedor');
        $valorSearch=$request->request->get('searchByText');
        $searchByFromDate = $request->request->get('searchByFromdate');
        $searchByToDate = $request->request->get('searchByTodate');

        /** @var \DateTime $searchByFromDate */
        $searchByFromDate = $searchByFromDate? \DateTime::createFromFormat('d/m/Y', $searchByFromDate): null;
        $searchByFromDate = $searchByFromDate? $searchByFromDate->setTime(0, 0): null;
        
        /** @var \DateTime $searchByToDate */
        $searchByToDate = $searchByToDate? \DateTime::createFromFormat('d/m/Y', $searchByToDate): null;
        $searchByToDate = $searchByToDate? $searchByToDate->setTime(23, 59): null;
        
        if($idVendedor || $idComprador || $valorSearch || $searchByFromDate || $searchByToDate)
        {
            $where="where";
            $andQuery = false;
            
            if($valorSearch) {
                $where=$where." (cliente.apellidos like :apellidos or cliente.nombre like :nombre ";

                $where=$where." or estadoPedido.nombre like :estado)";
                $whereParameters=[
                    'apellidos'=>'%'.$valorSearch.'%', 
                    'nombre'=>'%'.$valorSearch.'%',
                    'estado'=>'%'.$valorSearch.'%'];
                
                $andQuery = true;
            }
            
            if($searchByFromDate && $searchByToDate) {
                $andQuery? $where.= ' and': null;
                $where=$where." (pedido.fecha >= :fromdate and pedido.fecha <= :todate)";
                $whereParameters['fromdate']= $searchByFromDate;
                $whereParameters['todate']=$searchByToDate;
                $andQuery = true;
            } else {
                if($searchByFromDate) {
                    $andQuery? $where.= ' and': null;
                    $where=$where." pedido.fecha >= :fromdate";
                    $whereParameters['fromdate']= $searchByFromDate;
                    $andQuery = true;
                }
                if($searchByToDate) {
                    $andQuery? $where.= ' and': null;
                    $where=$where." pedido.fecha <= :todate";
                    $whereParameters['todate']=$searchByToDate;
                    $andQuery = true;
                }
            }

            if($idComprador) {
                $andQuery? $where.= ' and': null;
                $where=$where." comprador.id = :idComprador ";
                $whereParameters['idComprador']=$idComprador;
                $andQuery = true;
            }
            
            if($idVendedor) {
                $andQuery? $where.= ' and': null;
                $where=$where." vendedor.id = :idVendedor ";
                $whereParameters['idVendedor']=$idVendedor;
                $andQuery = true;
            }
                
        }
        
        $columnaOrder=$columnas[$request->request->get("order")[0]["column"]];
        $sentidoOrder=$request->request->get("order")[0]["dir"];

        if ($columnaOrder == "id") {
            $orderBy = "ORDER BY pedido.id ".$sentidoOrder;
        }
        if ($columnaOrder == "codigo") {
            $orderBy = "ORDER BY pedido.codigo ".$sentidoOrder;
        }
        if ($columnaOrder == "fecha") {
            $orderBy = "ORDER BY pedido.fecha ".$sentidoOrder;
        }
        if ($columnaOrder == "comprador") {
            $orderBy = "ORDER BY comprador.email ".$sentidoOrder;
        }
        if ($columnaOrder == "montoTotal") {
            $orderBy = "ORDER BY pedido.total ".$sentidoOrder;
        }
        if ($columnaOrder == "estado") {
            $orderBy = "ORDER BY estadoPedido.nombre ".$sentidoOrder;
        }

        $sql="select 

                  pedido
                  
              from 
              
              AdministracionBundle:Pedido pedido 
              JOIN pedido.estado estadoPedido
              JOIN pedido.usuario comprador
              JOIN pedido.producto producto
              JOIN producto.usuarioid vendedor
              LEFT JOIN comprador.clienteid cliente
             
              ".$where."  ".$orderBy." 
              
             
              
              
             "
        ;

        $dql=$em->createQuery($sql);

        $dql->setParameters($whereParameters);

        return $dql;
    }
    
    /**
     * Función que reviza los pedidos en estado recibido hasta la fecha
     * anterior de la fechaLimite.
     * 
     * @param \DateTime $fechaLimite
     * @return array
     */
    public function findPedidosRecibidosACerrar(\DateTime $fechaLimite) {
        
        $fechaLimiteSuperior = $fechaLimite;
//        $fechaLimiteInferior = (clone $fechaLimiteSuperior)->sub(new \DateInterval('P7D'));
        
        $alias = 'p';
        $qb = $this->createQueryBuilder($alias);
        $qb->innerJoin("{$alias}.estado", 'ep')
            ->andWhere($qb->expr()->eq("ep.slug", ':estadoPedidoSlug'))
            ->setParameter('estadoPedidoSlug', EstadoPedido::ESTADO_PEDIDO_RECIBIDO_SLUG);
        
//        if($fechaLimiteInferior) {
//            $qb->andWhere($qb->expr()->gte('p.fecha', ':fecha_desde'));
//            $qb->setParameter('fecha_desde', $fechaLimiteInferior, \Doctrine\DBAL\Types\Type::DATETIME);
//        }
        
        if($fechaLimiteSuperior) {
            $qb->andWhere($qb->expr()->lte('p.fecha', ':fecha_hasta'));
            $qb->setParameter('fecha_hasta', $fechaLimiteSuperior, \Doctrine\DBAL\Types\Type::DATETIME);
        }

        $q = $qb->getQuery();
        $results = $q->execute();

        return $results;
    }
    
    /**
     * Función que reviza los pedidos en estado recibido hasta la fecha
     * anterior de la fechaLimite.
     * 
     * @param \DateTime $fechaLimite
     * @return array
     */
    public function findPedidosDevueltosACerrar(\DateTime $fechaLimite) {
        
        $fechaLimiteSuperior = $fechaLimite;
//        $fechaLimiteInferior = (clone $fechaLimiteSuperior)->sub(new \DateInterval('P7D'));
        
        $alias = 'p';
        $qb = $this->createQueryBuilder($alias);
        $qb->innerJoin("{$alias}.estado", 'ep')
            ->andWhere($qb->expr()->eq("ep.slug", ':estadoPedidoSlug'))
            ->setParameter('estadoPedidoSlug', EstadoPedido::ESTADO_PEDIDO_DEVUELTO_SLUG);
        
//        if($fechaLimiteInferior) {
//            $qb->andWhere($qb->expr()->gte('p.fecha', ':fecha_desde'));
//            $qb->setParameter('fecha_desde', $fechaLimiteInferior, \Doctrine\DBAL\Types\Type::DATETIME);
//        }
        
        if($fechaLimiteSuperior) {
            $qb->andWhere($qb->expr()->lte('p.fecha', ':fecha_hasta'));
            $qb->setParameter('fecha_hasta', $fechaLimiteSuperior, \Doctrine\DBAL\Types\Type::DATETIME);
        }

        $q = $qb->getQuery();
        $results = $q->execute();

        return $results;
    }

    public function findByStatus($status)
    {
        $em = $this->getEntityManager();

        $query = "select p from AdministracionBundle:Pedido p left join p.estado e ";
        $query.= " where e.slug = :status";

        return $em->createQuery($query)->setParameter('status',$status)->getResult();
    }
}
